# function to viws for viwes.py

# TODO : function with test written There is no readability in the code at all
# def home_view(request, **kwargs, tag=None):
#      if tag:
#           posts = Post.objects.filter(tags__slug=tag)
            tag = get_object_or_404(Tag, slug=tag)
        else:
            posts = Post.objects.all()


# TODO: function with test written There is a readability in the code at all
# # def category_view(request, tag):
# #     posts = Post.objects.filter(tags__slug=tag)
# #     return render(request, "posts/home.html", {"posts": posts})
#
#
# class CategoryView(ListView):
#     model = Post
#     template_name = "posts/home.html"
#     context_object_name = "posts"
#
#     def get_queryset(self):
#         tag = self.kwargs.get("tag")
#         return Post.objects.filter(tags__slug=tag)


# TODO: function with test written There is a readability in the code at all
# @login_required
# def post_create_view(request, **kwargs):
#     form = PostCreateForm()
#     if request.method == "POST":
#         form = PostCreateForm(request.POST)
#         if form.is_valid():
#             post = form.save(commit=False)
#             website = request.get(form.data["url"])
#             sourcecode = BeautifulSoup(website.text, "html.parser")
#             find_image = sourcecode.select(
#                 'meta[content^="https://live.staticflickr.com/"]'
#             )
#             image = find_image[0]["content"]
#             post.image = image
#             find_title = sourcecode.select("h1.photo-title")
#             title = find_title[0].text.strip()
#             post.title = title
#             find_artist = sourcecode.select("a.owner-name")
#             artist = find_artist[0].text.strip()
#             post.artist = artist
#             post.save()
#             from .save_m2m()
#             return redirect("home")
#     return render(request, "posts/post_create_view.html", {"form": form})


# TODO: function with test written There is a readability in the code at all
# @login_required
# def post_delete_view(request, pk):
# post = get_object_or_404(Post, id=pk,  author=request.user)
#
#     if request.method == "POST":
#         post.delete()
#         messages.success(request, "پست با موفقیت حذف شد")
#         return redirect("home")
#     return render(request, "posts/post_delete.html", {"post": post})

# TODO: function with test written There is a readability in the code at all
# @login_required
# def post_edit_view(request, pk):
#     post = get_object_or_404(Post, id=pk, author=request.user)
#     form = PostEditForm(instance=post)
#     context = {
#         'post': post,
#         'form': form
#     }
#     if request.method == 'POST':
#         form = PostEditForm(request.POST, instance=post)
#         if form.is_valid():
#             form.save()
#             messages.success(request, 'Post updated')
#             return redirect('home')
#     return render(request, 'posts/post_edit.html', context=context)

# TODO: function with test written There is a readability in the code at all
# def post_page_view(request, pk):
#     post = get_object_or_404(Post, id=pk)
#     commentform = CommnetCreateForm()
#     context = {t
#         'post': post,
#         'commentform': commentform
#     return render(request, "posts/post_page.html", context=context)


# TODO: function with test written There is a readability in the code at all
# @login_required
# def comment_sent(request, pk)->None:
#     post = get_object_or_404(Post, id=pk)
#     if request.method == "POST":
#         form = CommnetCreateForm(request.POST)
#         if form.is_valid():
#             comment = form.save(commit=False)
#             comment.author = request.user
#             commnet.parent_post = post
#             comment.save()
#         return redirect("post_page", pk=pk)


#TODO: function with test written There is a readability in the code at all
# @login_required
# def comment_delete_view(request, pk):
#     comment = get_object_or_404(Comment, id=pk, author=request.user)
#     if request.method == "POST":
#         comment.delete()
#         messages.success(request, "نظر با موفقیت حذف شد")
#         return redirect("post" , pk=comment.parent_post.id)
#     return render(request, "posts/comment_delete.html", {"comment": comment})
